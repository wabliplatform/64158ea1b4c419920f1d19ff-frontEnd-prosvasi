/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Candidate from '../model/Candidate';

/**
* Candidate service.
* @module api/CandidateApi
* @version 1.0.0
*/
export default class CandidateApi {

    /**
    * Constructs a new CandidateApi. 
    * @alias module:api/CandidateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createcandidate operation.
     * @callback module:api/CandidateApi~createcandidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Candidate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Candidate} candidate data to be created
     * @param {module:api/CandidateApi~createcandidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Candidate}
     */
    createcandidate(candidate, callback) {
      let postBody = candidate;
      // verify the required parameter 'candidate' is set
      if (candidate === undefined || candidate === null) {
        throw new Error("Missing the required parameter 'candidate' when calling createcandidate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Candidate;
      return this.apiClient.callApi(
        '/candidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletecandidate operation.
     * @callback module:api/CandidateApi~deletecandidateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} candidateId the Id parameter
     * @param {module:api/CandidateApi~deletecandidateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletecandidate(candidateId, callback) {
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling deletecandidate");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/candidate/{candidateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllcandidate operation.
     * @callback module:api/CandidateApi~getAllcandidateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Candidate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/CandidateApi~getAllcandidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Candidate>}
     */
    getAllcandidate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Candidate];
      return this.apiClient.callApi(
        '/candidate/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getcandidate operation.
     * @callback module:api/CandidateApi~getcandidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Candidate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} candidateId the Id parameter
     * @param {module:api/CandidateApi~getcandidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Candidate}
     */
    getcandidate(candidateId, callback) {
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling getcandidate");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Candidate;
      return this.apiClient.callApi(
        '/candidate/{candidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatecandidate operation.
     * @callback module:api/CandidateApi~updatecandidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Candidate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} candidateId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Candidate} opts.candidate data to be updated
     * @param {module:api/CandidateApi~updatecandidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Candidate}
     */
    updatecandidate(candidateId, opts, callback) {
      opts = opts || {};
      let postBody = opts['candidate'];
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling updatecandidate");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Candidate;
      return this.apiClient.callApi(
        '/candidate/{candidateId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
